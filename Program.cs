using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Transforms.Onnx;
using System.Text.Json;

public class OnnxInput
{
[LoadColumn(0,28)]
[VectorType(29)] //VectorType(3)
public Int32 [] icat { get; set; }

[LoadColumn(0,23)]
[VectorType(24)]
public float [] inum { get; set; }

}

public class OnnxOutput 
{
    [ColumnName("cls")]
    public float[] cls { get; set; }
}

public class HardSoft
    {
        public Int32 [] Hard { get; set; }
        public float [] Soft { get; set; }
    }
    

class Program {

static string ONNX_MODEL_PATH = "model.onnx";
static string CAT_DECODER = "codeCats.json";

static ITransformer GetPredictionPipeline(MLContext mlContext){
 var inputColumns = new string []{
   "icat", "inum"
};

var outputColumns = new string [] { "cls" };

var onnxPredictionPipeline =
    mlContext
        .Transforms
        .ApplyOnnxModel(
            outputColumnNames: outputColumns,
            inputColumnNames: inputColumns,
            ONNX_MODEL_PATH);
            
var emptyDv = mlContext.Data.LoadFromEnumerable(new OnnxInput[] {});

return onnxPredictionPipeline.Fit(emptyDv);

}

static void Main(string[] args){
        //Console.WriteLine($"args: {args[0]}");
        string jsonData = File.ReadAllText(CAT_DECODER);
        var Decoder = JsonSerializer.Deserialize<Dictionary<Int64, Int64>>(jsonData);
        /*string jsonString = @"{""Hard"": [224, 8462, 7, 10, 0, 4096, 4096, 512, 5, 2, 5, 2, 4, 0, 1024, 2, 1024, 262144, 4096, 1048576, 4096, 0, 16, 3, 2, 0, 1, 0, 0],""Soft"": [1536.0, 1536.0, 4200.0, 8192.0, 1612185600.0, 16384.0, 33300.0, 2.78506345371, 0.446642116778, 4.54209516232, 1024.0, 512.0, 1536.0, 716.666666667, 62.0, 1080.0, 7.0, 1.0, 3.54378658001, 3.54378658001, 3.54378658001, 912.0, 912.0, 912.0]}";
        HardSoft? parsed = JsonSerializer.Deserialize<HardSoft>(jsonString);*/
        HardSoft? parsed = JsonSerializer.Deserialize<HardSoft>(args[0]);
        
	MLContext mlContext = new MLContext();
	var onnxPredictionPipeline = GetPredictionPipeline(mlContext);
	var onnxPredictionEngine = mlContext.Model.CreatePredictionEngine<OnnxInput, OnnxOutput>(onnxPredictionPipeline);
	var ICat = new List<Int32>();
	
	foreach(var e in parsed.Hard){
		ICat.Add((int)Decoder[e]);
	}
	
        var testInput = new OnnxInput
		{
		    icat = ICat.ToArray(),
		    inum = parsed.Soft
		}; 
	var prediction = onnxPredictionEngine.Predict(testInput);
	Console.WriteLine($"Predicted Value: {prediction.cls.First()}");  
        }

}
